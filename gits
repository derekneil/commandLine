# GIT
# some aliases require additional arguments to complete
# others can have additional functionality when used with more options

#source /usr/local/git/contrib/completion/git-completion.bash
git config --global color.ui true #change to always for colours to carry through pipes 2>/dev/null
git config core.fileMode false 2>/dev/null

alias gits='cat ~/gits'
alias mygits='emacs ~/gits'

alias grv='git remote -v'      #show list of remote repositories
alias gb='git branch'
alias gba='gb -a'      #show full branch listing including remote branches
alias gbd='gb -D'              #force delete git branch 

alias gch='git checkout'       #switch between branches
alias gchb='gch -b'            #create a new branch and switch to it

alias gs='git status'
alias gss='gs -s'              #more compact status

alias gd='git diff'            #see code changes from last commit, doesn't include new files                                            
alias gdc='gd --cached'        #see code changes currently staged for commit
alias stagged='gdc'

alias ga='git add'
alias gap='ga -p'              #pick which hunks of code in a file to stage for commit
alias gai='ga -i'              #more interactive (complicated) way to stage files and hunks of code for commit
alias gaa='ga -A'              #same as git add . blanket add changes, deletions, and any new files not expressly ignored
alias gau='ga -u'              #blanket add changes and deletions only, untracked files remain untracked

alias gignore='([ ! -e .gitignore ] && touch .gitignore) | echo $1 >>.gitignore'
alias guignore='([ ! -e .gitignore ] && touch .gitignore) | cat .gitignore | grep -v $1 >.gitignore'
alias ignores='cat .gitignore'

alias gst='git stash'          #stash away any changes to a branch, usefull so you can switch between branches without commit
alias gstu='gst save -k'        #stash away any UNSTAGED changes to a branch [optional stash name]
alias gsts='gst save'          #stash with a name
alias gstp='gst pop'           #pop last stash back into current working branch

alias gr='git reset'           #remove file from staging
alias untrack='git rm --cached -r'
alias unstage='gr HEAD'
alias abandon='git checkout --' #discard changes in working file and revert back to last commit version
alias grh='gr --hard'          #reset branch to last commit and throw away changes since
alias uncommit='gr HEAD^'      #undo last commit but keep local changes

alias gc='git commit'          #commit currently staged files
alias gca='gc -a'              #automatically stage deleted and modified files before commiting
alias gcaa='gca --amend'       #stage any changes and add to last commit
alias gcm='gc -m'              #type commit message as argument for command
alias gcam='gca -m'
alias gcama='gcaa -m'
alias gcma='gc --amend -m'
alias amend='gcma'

alias gtagam='git tag -am'
alias gtags='git describe --tags'
alias gtagl='git tag -l'

alias gwc='git whatchanged --decorate'    #review commit messages and files that had changes for commit history                         
alias gwcp='gwc -p'            #review lines of code that changed for commit history
alias gwca='gwc --all'
alias gwcap='gwca -p'

alias glogm='git log --graph --date-order --decorate'
alias glogmp='glogm -p'
alias glogam='glogm --all' 
alias glogamp='glogam -p'
alias glog='glogm --pretty="%C(yellow) %h %Cgreen%aN %Cblue%ad %Cred%d %Creset%s"'  #used to be oneline
alias glogs='glog --stat'
alias glogp='glog -p'
alias gloga='glog --all'       #show commit graph with all branches
alias glogas='gloga --stat'
alias glogap='gloga -p'
alias gloga5='gloga -n 5'

#show all dangling commits in the log
alias oops='glog --all $(git fsck --no-reflogs | grep commit | cut -d" " -f3)'       #show commit graph with all branches
alias crap='git fsck --cache --unreachable $(git for-each-ref --format="%(objectname)")'
alias everything='glog --all $(git fsck --no-reflogs | cut -d" " -f3)'       #show commit graph with all branches
alias cleaneverything='git reflog expire --expire-unreachable=now --all --verbose; git gc --prune=now'

grmbig() {
	 #remove big files
	 git filter-branch --force --index-filter 'git rm --cached -r --ignore-unmatch $1' --prune-empty --tag-name-filter cat -- --all
	 rm -rf .git/refs/original/
	 git reflog expire --expire=now --all
	 git gc --prune=now
	 git gc --aggressive --prune=now
}

alias gshow='git show'
alias grefl='git reflog --decorate'

alias gh='git push'
alias ght='git push --tags'
alias gl='git pull'             #not recommended
alias glr='gl --rebase'         #not recommended
alias gf='git fetch --tags'     #use this instead, review changes, then merge locally as desired

alias gua='git subtree add -P'
alias gul='git subtree pull -P'   #required arguments <folder> [options] <repo> <branch>
alias guh='git subtree push -P'
alias gum='git subtree merge -P'
alias gus='git subtree split -P'

alias gm='git merge'
alias gmtheirs='gm -Xtheirs'
alias gmours='gm -Xours'
alias gmnc='gm --no-commit'
alias gmnff='gm --no-ff'        #recommended merge command for more visual commit history
alias gmtheirsnff='gmnff -Xtheirs'
alias gmoursnff='gmnff -Xours'

#user prompt colors

alias __git_ps1="git branch 2>/dev/null | grep '*' | sed 's/* \(.*\)/(\1)/'"
export PS1='[\t]\[\033[0;34m\]\u\[\033[0;34m\]@\[\033[0;34m\]\h \[\033[0;34m\]\w\[\033[0;31m\]$(__git_ps1)\[\033[0;37m\]\\$ \[\033[00m\]'
